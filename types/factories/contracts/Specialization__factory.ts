/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Specialization,
  SpecializationInterface,
} from "../../contracts/Specialization";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum Specialization.SpecializationType",
        name: "specialization",
        type: "uint8",
      },
    ],
    name: "SpecializationChosen",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum Specialization.SpecializationType",
        name: "",
        type: "uint8",
      },
    ],
    name: "boostPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Specialization.SpecializationType",
        name: "specialization",
        type: "uint8",
      },
    ],
    name: "chooseSpecialization",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "getBoost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "playerSpecialization",
    outputs: [
      {
        internalType: "enum Specialization.SpecializationType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Specialization.SpecializationType",
        name: "specialization",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "boost",
        type: "uint256",
      },
    ],
    name: "setBoost",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100408161009a565b5060026020526105dc7fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5560016000526103e87fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0556100ea565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104b4806100f96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a61461011c5780638da5cb5b14610124578063b6bac01b1461013f578063f2fde38b1461015257600080fd5b8063166bd1631461008d57806362ab006a146100c657806367ba3d90146100f45780636e14403614610107575b600080fd5b6100b061009b3660046103b7565b60016020526000908152604090205460ff1681565b6040516100bd91906103fd565b60405180910390f35b6100e66100d4366004610439565b60026020526000908152604090205481565b6040519081526020016100bd565b6100e66101023660046103b7565b610165565b61011a610115366004610439565b6101bf565b005b61011a6102a3565b6000546040516001600160a01b0390911681526020016100bd565b61011a61014d366004610454565b6102b7565b61011a6101603660046103b7565b6102fc565b6001600160a01b0381166000908152600160208190526040822054600291839160ff1690811115610198576101986103e7565b60018111156101a9576101a96103e7565b8152602001908152602001600020549050919050565b33600090815260016020819052604082205460ff16908111156101e4576101e46103e7565b1461022c5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481cdc1958da585b1a5e9959606a1b60448201526064015b60405180910390fd5b3360009081526001602081905260409091208054839260ff1990911690838181111561025a5761025a6103e7565b0217905550336001600160a01b03167fadc0f7dbb139d198a33a286270b04eb9734736fbae5a7ed9114368660bac59b68260405161029891906103fd565b60405180910390a250565b6102ab61033a565b6102b56000610367565b565b6102bf61033a565b80600260008460018111156102d6576102d66103e7565b60018111156102e7576102e76103e7565b81526020810191909152604001600020555050565b61030461033a565b6001600160a01b03811661032e57604051631e4fbdf760e01b815260006004820152602401610223565b61033781610367565b50565b6000546001600160a01b031633146102b55760405163118cdaa760e01b8152336004820152602401610223565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156103c957600080fd5b81356001600160a01b03811681146103e057600080fd5b9392505050565b634e487b7160e01b600052602160045260246000fd5b602081016002831061041f57634e487b7160e01b600052602160045260246000fd5b91905290565b80356002811061043457600080fd5b919050565b60006020828403121561044b57600080fd5b6103e082610425565b6000806040838503121561046757600080fd5b61047083610425565b94602093909301359350505056fea264697066735822122080812f63cc9b5baba059bc2848c54e3dd7c34dc79af9895e854222820656987b64736f6c63430008180033";

type SpecializationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SpecializationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Specialization__factory extends ContractFactory {
  constructor(...args: SpecializationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Specialization & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Specialization__factory {
    return super.connect(runner) as Specialization__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SpecializationInterface {
    return new Interface(_abi) as SpecializationInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Specialization {
    return new Contract(address, _abi, runner) as unknown as Specialization;
  }
}
