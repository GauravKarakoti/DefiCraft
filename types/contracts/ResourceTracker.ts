/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ResourceTracker {
  export type ResourceStruct = { name: string; amount: BigNumberish };

  export type ResourceStructOutput = [name: string, amount: bigint] & {
    name: string;
    amount: bigint;
  };
}

export interface ResourceTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMinter"
      | "addResourceType"
      | "burnResource"
      | "getResourceAmount"
      | "getResources"
      | "mintResource"
      | "minters"
      | "owner"
      | "removeMinter"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ResourceAdded"
      | "ResourceRemoved"
      | "ResourceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addResourceType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnResource",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourceAmount",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getResources",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintResource",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addResourceType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResourceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceAddedEvent {
  export type InputTuple = [
    player: AddressLike,
    name: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [player: string, name: string, amount: bigint];
  export interface OutputObject {
    player: string;
    name: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceRemovedEvent {
  export type InputTuple = [player: AddressLike, name: string];
  export type OutputTuple = [player: string, name: string];
  export interface OutputObject {
    player: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceUpdatedEvent {
  export type InputTuple = [
    player: AddressLike,
    name: string,
    newAmount: BigNumberish
  ];
  export type OutputTuple = [player: string, name: string, newAmount: bigint];
  export interface OutputObject {
    player: string;
    name: string;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ResourceTracker extends BaseContract {
  connect(runner?: ContractRunner | null): ResourceTracker;
  waitForDeployment(): Promise<this>;

  interface: ResourceTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMinter: TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;

  addResourceType: TypedContractMethod<[name: string], [void], "nonpayable">;

  burnResource: TypedContractMethod<
    [player: AddressLike, name: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getResourceAmount: TypedContractMethod<
    [player: AddressLike, name: string],
    [bigint],
    "view"
  >;

  getResources: TypedContractMethod<
    [player: AddressLike],
    [ResourceTracker.ResourceStructOutput[]],
    "view"
  >;

  mintResource: TypedContractMethod<
    [player: AddressLike, name: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  minters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addResourceType"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnResource"
  ): TypedContractMethod<
    [player: AddressLike, name: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getResourceAmount"
  ): TypedContractMethod<[player: AddressLike, name: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getResources"
  ): TypedContractMethod<
    [player: AddressLike],
    [ResourceTracker.ResourceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintResource"
  ): TypedContractMethod<
    [player: AddressLike, name: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ResourceAdded"
  ): TypedContractEvent<
    ResourceAddedEvent.InputTuple,
    ResourceAddedEvent.OutputTuple,
    ResourceAddedEvent.OutputObject
  >;
  getEvent(
    key: "ResourceRemoved"
  ): TypedContractEvent<
    ResourceRemovedEvent.InputTuple,
    ResourceRemovedEvent.OutputTuple,
    ResourceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ResourceUpdated"
  ): TypedContractEvent<
    ResourceUpdatedEvent.InputTuple,
    ResourceUpdatedEvent.OutputTuple,
    ResourceUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ResourceAdded(address,string,uint256)": TypedContractEvent<
      ResourceAddedEvent.InputTuple,
      ResourceAddedEvent.OutputTuple,
      ResourceAddedEvent.OutputObject
    >;
    ResourceAdded: TypedContractEvent<
      ResourceAddedEvent.InputTuple,
      ResourceAddedEvent.OutputTuple,
      ResourceAddedEvent.OutputObject
    >;

    "ResourceRemoved(address,string)": TypedContractEvent<
      ResourceRemovedEvent.InputTuple,
      ResourceRemovedEvent.OutputTuple,
      ResourceRemovedEvent.OutputObject
    >;
    ResourceRemoved: TypedContractEvent<
      ResourceRemovedEvent.InputTuple,
      ResourceRemovedEvent.OutputTuple,
      ResourceRemovedEvent.OutputObject
    >;

    "ResourceUpdated(address,string,uint256)": TypedContractEvent<
      ResourceUpdatedEvent.InputTuple,
      ResourceUpdatedEvent.OutputTuple,
      ResourceUpdatedEvent.OutputObject
    >;
    ResourceUpdated: TypedContractEvent<
      ResourceUpdatedEvent.InputTuple,
      ResourceUpdatedEvent.OutputTuple,
      ResourceUpdatedEvent.OutputObject
    >;
  };
}
