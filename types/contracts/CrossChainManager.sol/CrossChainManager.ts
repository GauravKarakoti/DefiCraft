/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CrossChainManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "autoRebalance"
      | "chainAPYs"
      | "crossChainCraft"
      | "deployWorkshop"
      | "fee"
      | "fulfillAPYUpdate"
      | "jobId"
      | "oracle"
      | "owner"
      | "renounceOwnership"
      | "setOracle"
      | "transferOwnership"
      | "withdrawLink"
      | "workshopFactory"
      | "workshops"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "APYUpdated"
      | "ChainlinkCancelled"
      | "ChainlinkFulfilled"
      | "ChainlinkRequested"
      | "CrossChainCrafting"
      | "FundsRebalanced"
      | "OwnershipTransferred"
      | "WorkshopDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "autoRebalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainAPYs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainCraft",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWorkshop",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfillAPYUpdate",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "jobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workshopFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workshops",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "autoRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainAPYs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crossChainCraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWorkshop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAPYUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workshopFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workshops", data: BytesLike): Result;
}

export namespace APYUpdatedEvent {
  export type InputTuple = [chainIds: BigNumberish[], apys: BigNumberish[]];
  export type OutputTuple = [chainIds: bigint[], apys: bigint[]];
  export interface OutputObject {
    chainIds: bigint[];
    apys: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainlinkCancelledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainlinkFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainlinkRequestedEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainCraftingEvent {
  export type InputTuple = [
    workshopId: BigNumberish,
    sourceChain: BigNumberish,
    destChain: BigNumberish,
    resource: string
  ];
  export type OutputTuple = [
    workshopId: bigint,
    sourceChain: bigint,
    destChain: bigint,
    resource: string
  ];
  export interface OutputObject {
    workshopId: bigint;
    sourceChain: bigint;
    destChain: bigint;
    resource: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsRebalancedEvent {
  export type InputTuple = [
    workshopId: BigNumberish,
    fromChain: BigNumberish,
    toChain: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    workshopId: bigint,
    fromChain: bigint,
    toChain: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    workshopId: bigint;
    fromChain: bigint;
    toChain: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkshopDeployedEvent {
  export type InputTuple = [workshopId: BigNumberish, chainIds: BigNumberish[]];
  export type OutputTuple = [workshopId: bigint, chainIds: bigint[]];
  export interface OutputObject {
    workshopId: bigint;
    chainIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrossChainManager extends BaseContract {
  connect(runner?: ContractRunner | null): CrossChainManager;
  waitForDeployment(): Promise<this>;

  interface: CrossChainManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  autoRebalance: TypedContractMethod<
    [workshopId: BigNumberish],
    [void],
    "nonpayable"
  >;

  chainAPYs: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  crossChainCraft: TypedContractMethod<
    [
      workshopId: BigNumberish,
      sourceChain: BigNumberish,
      destChain: BigNumberish,
      resource: string
    ],
    [void],
    "nonpayable"
  >;

  deployWorkshop: TypedContractMethod<
    [workshopId: BigNumberish, chainIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  fee: TypedContractMethod<[], [bigint], "view">;

  fulfillAPYUpdate: TypedContractMethod<
    [_requestId: BytesLike, _apyData: BytesLike],
    [void],
    "nonpayable"
  >;

  jobId: TypedContractMethod<[], [string], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOracle: TypedContractMethod<
    [_oracle: AddressLike, _jobId: BytesLike, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawLink: TypedContractMethod<[], [void], "nonpayable">;

  workshopFactory: TypedContractMethod<[], [string], "view">;

  workshops: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { owner: string; lastRebalance: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "autoRebalance"
  ): TypedContractMethod<[workshopId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chainAPYs"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "crossChainCraft"
  ): TypedContractMethod<
    [
      workshopId: BigNumberish,
      sourceChain: BigNumberish,
      destChain: BigNumberish,
      resource: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployWorkshop"
  ): TypedContractMethod<
    [workshopId: BigNumberish, chainIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fulfillAPYUpdate"
  ): TypedContractMethod<
    [_requestId: BytesLike, _apyData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "jobId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<
    [_oracle: AddressLike, _jobId: BytesLike, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawLink"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "workshopFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "workshops"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { owner: string; lastRebalance: bigint }],
    "view"
  >;

  getEvent(
    key: "APYUpdated"
  ): TypedContractEvent<
    APYUpdatedEvent.InputTuple,
    APYUpdatedEvent.OutputTuple,
    APYUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ChainlinkCancelled"
  ): TypedContractEvent<
    ChainlinkCancelledEvent.InputTuple,
    ChainlinkCancelledEvent.OutputTuple,
    ChainlinkCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ChainlinkFulfilled"
  ): TypedContractEvent<
    ChainlinkFulfilledEvent.InputTuple,
    ChainlinkFulfilledEvent.OutputTuple,
    ChainlinkFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "ChainlinkRequested"
  ): TypedContractEvent<
    ChainlinkRequestedEvent.InputTuple,
    ChainlinkRequestedEvent.OutputTuple,
    ChainlinkRequestedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainCrafting"
  ): TypedContractEvent<
    CrossChainCraftingEvent.InputTuple,
    CrossChainCraftingEvent.OutputTuple,
    CrossChainCraftingEvent.OutputObject
  >;
  getEvent(
    key: "FundsRebalanced"
  ): TypedContractEvent<
    FundsRebalancedEvent.InputTuple,
    FundsRebalancedEvent.OutputTuple,
    FundsRebalancedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WorkshopDeployed"
  ): TypedContractEvent<
    WorkshopDeployedEvent.InputTuple,
    WorkshopDeployedEvent.OutputTuple,
    WorkshopDeployedEvent.OutputObject
  >;

  filters: {
    "APYUpdated(uint256[],uint256[])": TypedContractEvent<
      APYUpdatedEvent.InputTuple,
      APYUpdatedEvent.OutputTuple,
      APYUpdatedEvent.OutputObject
    >;
    APYUpdated: TypedContractEvent<
      APYUpdatedEvent.InputTuple,
      APYUpdatedEvent.OutputTuple,
      APYUpdatedEvent.OutputObject
    >;

    "ChainlinkCancelled(bytes32)": TypedContractEvent<
      ChainlinkCancelledEvent.InputTuple,
      ChainlinkCancelledEvent.OutputTuple,
      ChainlinkCancelledEvent.OutputObject
    >;
    ChainlinkCancelled: TypedContractEvent<
      ChainlinkCancelledEvent.InputTuple,
      ChainlinkCancelledEvent.OutputTuple,
      ChainlinkCancelledEvent.OutputObject
    >;

    "ChainlinkFulfilled(bytes32)": TypedContractEvent<
      ChainlinkFulfilledEvent.InputTuple,
      ChainlinkFulfilledEvent.OutputTuple,
      ChainlinkFulfilledEvent.OutputObject
    >;
    ChainlinkFulfilled: TypedContractEvent<
      ChainlinkFulfilledEvent.InputTuple,
      ChainlinkFulfilledEvent.OutputTuple,
      ChainlinkFulfilledEvent.OutputObject
    >;

    "ChainlinkRequested(bytes32)": TypedContractEvent<
      ChainlinkRequestedEvent.InputTuple,
      ChainlinkRequestedEvent.OutputTuple,
      ChainlinkRequestedEvent.OutputObject
    >;
    ChainlinkRequested: TypedContractEvent<
      ChainlinkRequestedEvent.InputTuple,
      ChainlinkRequestedEvent.OutputTuple,
      ChainlinkRequestedEvent.OutputObject
    >;

    "CrossChainCrafting(uint256,uint256,uint256,string)": TypedContractEvent<
      CrossChainCraftingEvent.InputTuple,
      CrossChainCraftingEvent.OutputTuple,
      CrossChainCraftingEvent.OutputObject
    >;
    CrossChainCrafting: TypedContractEvent<
      CrossChainCraftingEvent.InputTuple,
      CrossChainCraftingEvent.OutputTuple,
      CrossChainCraftingEvent.OutputObject
    >;

    "FundsRebalanced(uint256,uint256,uint256,uint256)": TypedContractEvent<
      FundsRebalancedEvent.InputTuple,
      FundsRebalancedEvent.OutputTuple,
      FundsRebalancedEvent.OutputObject
    >;
    FundsRebalanced: TypedContractEvent<
      FundsRebalancedEvent.InputTuple,
      FundsRebalancedEvent.OutputTuple,
      FundsRebalancedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WorkshopDeployed(uint256,uint256[])": TypedContractEvent<
      WorkshopDeployedEvent.InputTuple,
      WorkshopDeployedEvent.OutputTuple,
      WorkshopDeployedEvent.OutputObject
    >;
    WorkshopDeployed: TypedContractEvent<
      WorkshopDeployedEvent.InputTuple,
      WorkshopDeployedEvent.OutputTuple,
      WorkshopDeployedEvent.OutputObject
    >;
  };
}
